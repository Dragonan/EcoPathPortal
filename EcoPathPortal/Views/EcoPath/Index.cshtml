@model EcoPathPortal.Models.EcoPathModel
@using System.Web.Script.Serialization
@{
    ViewBag.Title = "Еко Пътека";
}
@using (Html.BeginForm())
{
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
      html { height: 100% }
      body { height: 100%; margin: 0; padding: 0 }
      #map-canvas { height: 100% }
    </style>
    <script type="text/javascript"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCO5aHEtpeBnTHzFqOf4psGhCzeMXRNsTc&sensor=false&v=3">
    </script>
    <script type="text/javascript">
        var map;
        var directionsDisplay;
        var directionsService;
        var stepDisplay;
        var markerArray = [];

        function initialize() {
            // Instantiate a directions service.
            directionsService = new google.maps.DirectionsService();

            // Create a map and center it on Manhattan.
            var mapOptions = {
                center: new google.maps.LatLng(@(Model.Entity.Latitude),@(Model.Entity.Longitude)),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

            // Create a renderer for directions and bind it to the map.
            var rendererOptions = {
                map: map
            }
            directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)

            // Instantiate an info window to hold step text.
            stepDisplay = new google.maps.InfoWindow();
            calcRoute();
        }

        function calcRoute() {

            // First, remove any existing markers from the map.
            for (var i = 0; i < markerArray.length; i++) {
                markerArray[i].setMap(null);
            }

            // Now, clear the array itself.
            markerArray = [];

            // Retrieve the start and end locations and create
            // a DirectionsRequest using WALKING directions.
            var start = document.getElementById('PathCity').value + ", Bulgaria";
            var end = @(Model.Entity.Latitude.ToString()) + ", " + @(Model.Entity.Longitude);
            var request = {
                origin: start,
                destination: end,
                travelMode: google.maps.TravelMode.DRIVING
            };

            // Route the directions and pass the response to a
            // function to create markers for each step.
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    var warnings = document.getElementById('warnings_panel');
                    //warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>';
                    directionsDisplay.setDirections(response);
                    showSteps(response);
                }
            });
        }

        function showSteps(directionResult) {
            // For each step, place a marker, and add the text to the marker's
            // info window. Also attach the marker to an array so we
            // can keep track of it and remove it when calculating new
            // routes.
            var myRoute = directionResult.routes[0].legs[0];

            for (var i = 0; i < myRoute.steps.length; i++) {
                var marker = new google.maps.Marker({
                    position: myRoute.steps[i].start_point,
                    map: map
                });
                markerArray[i] = marker;
            }
        }

        google.maps.event.addDomListener(window, 'load', initialize);
    </script>

    <div>
        @Html.HiddenFor(m => m.entId)
        <div style="text-align:center; margin: 0 auto;">@Model.Entity.Name</div>
        <div style="height:500px; width:40%; margin: 0 auto;" id="map-canvas"></div>
        <div style="text-align:left; width:40%; margin: 0 auto;">@Model.Entity.Description</div>
        <div style="text-align:center; margin: 0 auto;"><a href="@Model.Entity.LinkToMoreInfo" target="_blank">Повече информация</a></div>
        <div style="text-align:center; margin: 0 auto;">
            Път до екопътеката от: @Html.DropDownListFor(m => m.PathCity, Model.GetCities(), new { onchange = "calcRoute();" })
        <br />
        <br />
        </div>
        <div style="margin: 0 auto;">
        <table style="text-align:center; margin: 0 auto;">
        @if (Request.IsAuthenticated)
        {
            <tr>
                <td>
                    @User.Identity.Name :
                </td>
                <td>
                    @Html.TextAreaFor(m => m.newCommText)
                </td>
                <td>
                    <input type="submit" value="submit" />
                </td>
            </tr>
        }
        @foreach (var comment in Model.Entity.Comments.OrderByDescending(m => m.Date))
        {
            <tr style="border:1px solid black">
                <td>
                    @comment.User_Accounts.Username :
                </td>
                <td>
                    @comment.Text
                </td>
            </tr>
        }
        </table>
        </div>
    </div>
}